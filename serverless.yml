service: insultbot

custom:
  region: ${self:provider.region}
  stage: ${env:STAGE, self:custom.localConfig.stage, opt:stage, 'dev'}
  prefixAuto: ${self:service}-${self:custom.stage}
  prefix: ${env:PREFIX, self:custom.prefixAuto}
  resourceNames:
    objects: ${self:custom.prefix}-objects
    followers: ${self:custom.prefix}-followers
    delivery: ${self:custom.prefix}-delivery
    sqs: ${self:custom.prefix}-messages

provider:
  name: aws
  runtime: nodejs8.10

  environment:
    LOG_LEVEL: ${env:LOG_LEVEL, "debug"}
    HOSTNAME: ${env:HOSTNAME, "insultron.lmorchard.com"}
    ACTOR_NAME: ${env:ACTOR_NAME, "Insultron2000"}
    QUEUE_NAME: ${self:custom.resourceNames.sqs}
    OBJECTS_TABLE: ${self:custom.resourceNames.objects}
    FOLLOWERS_TABLE: ${self:custom.resourceNames.followers}

  iamRoleStatements:
  - Effect: Allow
    Resource: arn:aws:sqs:*:*:${self:custom.resourceNames.sqs}
    Action:
      - sqs:ChangeMessageVisibility
      - sqs:ChangeMessageVisibilityBatch
      - sqs:DeleteMessage
      - sqs:DeleteMessageBatch
      - sqs:GetQueueAttributes
      - sqs:GetQueueUrl
      - sqs:ReceiveMessage
      - sqs:SendMessage
      - sqs:SendMessageBatch
  - Effect: Allow
    Action:
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:DeleteItem
      - dynamodb:UpdateItem
      - dynamodb:BatchGetItem
      - dynamodb:BatchWriteItem
      - dynamodb:Query
      - dynamodb:Scan
    Resource:
      - arn:aws:dynamodb:*:*:table/${self:custom.resourceNames.objects}
      - arn:aws:dynamodb:*:*:table/${self:custom.resourceNames.objects}/index/*
      - arn:aws:dynamodb:*:*:table/${self:custom.resourceNames.followers}
      - arn:aws:dynamodb:*:*:table/${self:custom.resourceNames.followers}/index/*

resources:
  Resources:

    DeliveryMessages:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.resourceNames.sqs}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60

    Objects:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.resourceNames.objects}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
          - AttributeName: type
            AttributeType: S
          - AttributeName: published
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: byPublished
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: published
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Followers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.resourceNames.followers}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  index:
    handler: functions/index.get
    name: ${self:custom.prefix}-indexGet
    events:
      - http: GET /

  webfingerGet:
    handler: functions/webfinger.get
    name: ${self:custom.prefix}-webfingerGet
    events:
      - http: GET .well-known/webfinger

  actorGet:
    handler: functions/actor.get
    name: ${self:custom.prefix}-actorGet
    events:
      - http: GET actor

  objectsGet:
    handler: functions/objects.get
    name: ${self:custom.prefix}-objectsGet
    events:
      - http:
          method: GET
          path: objects/{uuid}
          request:
            parameters:
              paths:
                uuid: true

  inboxPost:
    handler: functions/inbox.post
    name: ${self:custom.prefix}-inboxPost
    events:
      - http: POST inbox

  outboxGet:
    handler: functions/outbox.get
    name: ${self:custom.prefix}-outboxGet
    events:
      - http: GET outbox

  #periodic:
  #  timeout: 60
  #  handler: functions/periodic.handler
  #  name: ${self:custom.prefix}-periodic
  #  events:
  #    - schedule: rate(1 hour)

  delivery:
    timeout: 60
    handler: functions/delivery.handler
    name: ${self:custom.resourceNames.delivery}
    reservedConcurrency: 5
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - DeliveryMessages
              - Arn
